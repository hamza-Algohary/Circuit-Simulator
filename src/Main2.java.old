import java.util.HashMap;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;

import javax.swing.JFrame;
import java.awt.Color;

import info.monitorenter.gui.chart.Chart2D;
import info.monitorenter.gui.chart.ITrace2D;
import info.monitorenter.gui.chart.traces.Trace2DLtd;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

public class Main{
    public static void main(String args[]) throws Exception{

        /*Component components[] = new Component[]{
            new AC_V(new Point[]{new Point(0 , 0) , new Point(0 , 1)} , new Double[] {15.0 , 60.0}),
            new Resistance(new Point[]{new Point(0 , 1) , new Point(1 , 1)} , new Double[] {5.0}),
        };*/
        /*Component[] components = {
            new DC_V(new Point[]{new Point(0 , 0) , new Point(0 , 1)} , new Double[] {/*60.0 , *//*15.0}),
            /*new Resistance(new Point[]{new Point(0 , 1) , new Point(1 , 1)} , new Double[] {5.0}),
            new Resistance(new Point[]{new Point(0 , 0) , new Point(1 , 0)} , new Double[] {5.0}),
            //new Capacitor(new Point[]{new Point(1 , 0) , new Point(1 , 1)} , new Double[] {0.00001})
            //new DC_V(new Point[]{new Point(1 , 0) , new Point(1 , 1)} , new Double[] {-15.0})
            new Resistance(new Point[]{new Point(1 , 0) , new Point(1 , 1)} , new Double[] {5.0})
        };*/
        Component[] components = {
            new DC_V(new Point[]{new Point(0 , 0) , new Point(0 , 1)} , new Double[] {60.0}),
            new Resistance(new Point[]{new Point(0 , 1) , new Point(1 , 1)} , new Double[] {5.0}),
            new Resistance(new Point[]{new Point(0 , 0) , new Point(1 , 0)} , new Double[] {5.0}),
            new Resistance(new Point[]{new Point(1 , 0) , new Point(1 , 1)} , new Double[] {5.0})
        };
        CircuitSimulator simulator = new CircuitSimulator(components);

        //Oscilloscope oscilloscope = new Oscilloscope();
        Net net = new Net();
        ITrace2D trace = new Trace2DLtd(50);
        trace.setColor(Color.RED);
        Chart2D chart = new Chart2D();
        chart.addTrace(trace);
        //Frame_1 frame_1 = new Frame_1();
        JFrame frame = new JFrame();

        frame.getContentPane().add(chart);

        frame.setSize(400,300);
        frame.addWindowListener(
                new WindowAdapter(){
                    public void windowClosing(WindowEvent e){
                        System.exit(0);
                    }
                }
        );
        frame.setVisible(true);

        double speed = 0.01;
        Scanner in = new Scanner(System.in);
        for(;;){
            //double rand = Math.random();
            HashMap<String ,Double> vars = simulator.tick();
            double x = simulator.currentTime_ms;//(double) System.currentTimeMillis()*speed;
            double y = vars.get("I0.0,0.0:0.0,1.0"); //Math.sin(x);
            trace.addPoint(x , y);    
            TimeUnit.MILLISECONDS.sleep(20);  
            in.next();
        }
        /*HashMap<String ,Double> vars = simulator.solve();
        vars.forEach((String name , Double value)->{
            System.out.println(name+" = "+value);
        });*/

        /*for(double x=0;;x+=0.01){
            //double rand = Math.random();
            //double x = (double) System.currentTimeMillis();
            double y = Math.sin(x);
            //oscilloscope.addPoint(x , y);
            trace.addPoint(x, y);   
            System.out.println(""+x + " , " + y); 
            //TimeUnit.MILLISECONDS.sleep(20);  
        }*/
        /*for(int i = 0;;i++){
            //HashMap<String ,Double> vars = simulator.solve();
            //double y = vars.get("I0,1:1,1");
            //double x = simulator.currentTime_ms;
            oscilloscope.addCurrent(i , i);    
            //TimeUnit.MILLISECONDS.sleep(20);  
        }*/
        //Frame_1 f = new Frame_1();
        /*double Aarr[][] = {
            {1 ,0 ,0, 0, 0, 0},
            {-1, 1, 0, 0, 0, 0},
            {0 ,-0.2 ,0.7, -0.4, 0, -0.1},
            {0 ,0 , -0.4 , 0.8, -0.4, 0},
            {0 ,0, 0, -0.4 ,0.6, -0.2},
            {-0.2 ,0 ,-0.1, 0, -0.2, 0.5},
        };
        double Barr[] = {0, 30, 0, 0, 0, 0};
        HashMap<String , Double> vars = new HashMap<>();
        String varNames[] = {"v0","v1","v2","v3","v4","v5"};
        try{
            vars = Algebra.solve(varNames , Aarr, Barr);
        }catch(Exception e){
            System.out.println(e.toString());
        }
        vars.forEach((String name , Double value)->{
            System.out.println(name + " = " + value);
        });*/
        /*Point p1 = new Point(1 , 1);
        Point p2 = new Point(1 , 1);
        System.out.println(p1.equals(p2));
        HashMap<Point, String> pMap = new HashMap<>();
        pMap.put(p1, "hello");
        System.out.println(pMap.containsKey(p1));
        */
        
        /*Component[] components = {
            new DC_V(new Point[]{new Point(0 , 0) , new Point(0 , 1)} , new Double[] {15.0}),
            new Resistance(new Point[]{new Point(0 , 1) , new Point(1 , 1)} , new Double[] {5.0}),
            new Resistance(new Point[]{new Point(0 , 0) , new Point(1 , 0)} , new Double[] {5.0}),
            new Resistance(new Point[]{new Point(1 , 0) , new Point(1 , 1)} , new Double[] {5.0})
        };*/
        /*Component[] components = {
            new DC_V(new Point[]{new Point(0 , 0) , new Point(1 , 0)} , new Double[]{0.0}),
            new Resistance(new Point[]{new Point(1 , 0) , new Point(2 , 0)} , new Double[]{12000.0}),
            new DC_V(new Point[]{new Point(2 , 0) , new Point(3 , 0)} , new Double[]{0.0}),

            new Resistance(new Point[]{new Point(0 , 0), new Point(0 , 1)}, new Double[]{4000.0}),
            new Resistance(new Point[]{new Point(1 , 0), new Point(1 , 1)}, new Double[]{6000.0}),
            new Resistance(new Point[]{new Point(2 , 0), new Point(2 , 1)}, new Double[]{18000.0}),
            new Resistance(new Point[]{new Point(3 , 0), new Point(3 , 1)}, new Double[]{6000.0}),

            new DC_V(new Point[]{new Point(1 , 1), new Point(2 , 1)}, new Double[]{0.0}),

            new DC_V(new Point[]{new Point(0 , 1), new Point(0 , 2)}, new Double[]{0.0}),
            new DC_V(new Point[]{new Point(2 , 1), new Point(2 , 2)}, new Double[]{-42.0}),
            new DC_V(new Point[]{new Point(3 , 1), new Point(3 , 2)}, new Double[]{0.0}),

            new DC_V(new Point[]{new Point(0 , 2), new Point(1 , 2)}, new Double[]{0.0}),
            new DC_V(new Point[]{new Point(1 , 2), new Point(2 , 2)}, new Double[]{0.0}),
            new DC_V(new Point[]{new Point(2 , 2), new Point(3 , 2)}, new Double[]{0.0}),     
        };

        CircuitSimulator simulator = new CircuitSimulator();
        try{
            simulator = new CircuitSimulator(components);
        }catch(Exception e){
            System.out.println(e);
            e.printStackTrace();
        }
        HashMap<String , Double> varNames = new HashMap<>();
        try{
            varNames = simulator.solve();      
        }catch(Exception e){
            throw e;
        }
        varNames.forEach((String name , Double value)->{
            System.out.println(name + " = " + value);
        });
        //System.out.println(varNames.get("I0,0:1,0"));
        for (HashMap.Entry<String , String[]> entry : ComponentUI.componentsOrientataions.entrySet()) {
            System.out.println(entry.getKey());
            for (String s :  entry.getValue()){
                System.out.println("\t"+s);
            }
        }
        /*System.out.println(components[0].getEquation());
        System.out.println(components[1].getEquation());
        System.out.println(components[2].getEquation());
        System.out.println(components[3].getEquation());
        System.out.println(simulator.nodes.length);
        System.out.println(simulator.nodes[0]);
        System.out.println(simulator.nodes[1]);
        System.out.println(simulator.nodes[2]);
        System.out.println(simulator.nodes[3]);
        System.out.println(simulator.nodes[0].getEquation());
        varNames.forEach((String name, Double value)->{
            System.out.println(name + " = " + value);
        });*/
        
    }
}